{"version":3,"sources":["components/Employee.js","components/Employees.js","components/filterBtn.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","className","id","first_name","last_name","gender","Employees","employeesList","employees","filter","map","employee","login","uuid","name","first","last","phone","width","border","aria-labelledby","FilterBtn","type","aria-pressed","isPressed","onClick","setFilter","App","useState","people","setPeople","FILTER_MAP","All","Female","Male","FILTER_NAMES","Object","keys","useEffect","axios","get","then","repos","data","results","filterList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kQAEe,SAASA,EAASC,GAC/B,OACE,qBAAIC,UAAU,WAAd,UACE,6BAAKD,EAAME,KACX,6BAAKF,EAAMG,aACX,6BAAKH,EAAMI,YACX,6BAAKJ,EAAMK,YCLF,SAASC,EAAUN,GAChC,IAAMO,EAAgBP,EAAMQ,UACzBC,OAAOT,EAAMS,QACbC,KAAI,SAACC,GAAD,OACH,cAACZ,EAAD,CACEG,GAAIS,EAASC,MAAMC,KACnBV,WAAYQ,EAASG,KAAKC,MAC1BX,UAAWO,EAASG,KAAKE,KACzBC,MAAON,EAASM,MAChBZ,OAAQM,EAASN,QACZM,EAASC,MAAMC,SAI1B,OACE,8BACE,uBACEK,MAAM,OACNC,OAAO,IACPlB,UAAU,4CACVmB,kBAAgB,eAJlB,SAME,kCACE,qBAAInB,UAAU,WAAd,UACE,oCACA,4CACA,2CACA,2CAEDM,SC9BI,SAASc,EAAUrB,GAChC,OACE,yBACEsB,KAAK,SACLrB,UAAU,iBACVsB,eAAcvB,EAAMwB,UACpBC,QAAS,kBAAMzB,EAAM0B,UAAU1B,EAAMc,OAJvC,kBAMQd,EAAMc,KANd,gBCmCWa,MAjCf,SAAa3B,GAAQ,IAAD,EACU4B,mBAAS,OADnB,mBACXnB,EADW,KACHiB,EADG,OAEUE,mBAAS,IAFnB,mBAEXC,EAFW,KAEHC,EAFG,KAGZC,EAAa,CACjBC,IAAK,kBAAM,GACXC,OAAQ,SAACtB,GAAD,MAAkC,WAApBA,EAASN,QAC/B6B,KAAM,SAACvB,GAAD,MAAkC,SAApBA,EAASN,SAEzB8B,EAAeC,OAAOC,KAAKN,GACjCO,qBAAU,WAGRC,IAAMC,IADS,yCACGC,MAAK,SAACC,GAAD,OAAWZ,EAAUY,EAAMC,KAAKC,cACtD,IACH,IAAMC,EAAaV,EAAazB,KAAI,SAACI,GAAD,OAClC,cAACO,EAAD,CAEEP,KAAMA,EACNU,UAAWV,IAASL,EACpBiB,UAAWA,GAHNZ,MAOT,OACE,sBAAKb,UAAU,mCAAf,UACE,6BAAKQ,IAEL,qBAAKR,UAAU,oCAAf,SAAoD4C,IACpD,cAACvC,EAAD,CAAWE,UAAWqB,EAAQpB,OAAQsB,EAAWtB,SCtBnCqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAACkB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd369cc9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Employee(props) {\r\n  return (\r\n    <tr className=\"employee\">\r\n      <td>{props.id}</td>\r\n      <td>{props.first_name}</td>\r\n      <td>{props.last_name}</td>\r\n      <td>{props.gender}</td>\r\n    </tr>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Employee from \"./Employee\";\r\n\r\nexport default function Employees(props) {\r\n  const employeesList = props.employees\r\n    .filter(props.filter)\r\n    .map((employee) => (\r\n      <Employee\r\n        id={employee.login.uuid}\r\n        first_name={employee.name.first}\r\n        last_name={employee.name.last}\r\n        phone={employee.phone}\r\n        gender={employee.gender}\r\n        key={employee.login.uuid}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <div>\r\n      <table\r\n        width=\"100%\"\r\n        border=\"1\"\r\n        className=\"employee-list stack-large stack-exception\"\r\n        aria-labelledby=\"list-heading\"\r\n      >\r\n        <thead>\r\n          <tr className=\"employee\">\r\n            <th>ID</th>\r\n            <th>First Name</th>\r\n            <th>Last Name</th>\r\n            <th>Gender</th>\r\n          </tr>\r\n          {employeesList}\r\n        </thead>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function FilterBtn(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      Show {props.name} Employees\r\n    </button>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\nimport Employees from \"./components/Employees\";\r\nimport FilterBtn from \"./components/filterBtn\";\r\n\r\nfunction App(props) {\r\n  const [filter, setFilter] = useState(\"All\");\r\n  const [people, setPeople] = useState([]);\r\n  const FILTER_MAP = {\r\n    All: () => true,\r\n    Female: (employee) => employee.gender === \"female\",\r\n    Male: (employee) => employee.gender === \"male\",\r\n  };\r\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\r\n  useEffect(() => {\r\n    // call setPeople from results of axios\r\n    const apiUrl = \"https://randomuser.me/api/?results=50\";\r\n    axios.get(apiUrl).then((repos) => setPeople(repos.data.results));\r\n  }, []); // use\r\n  const filterList = FILTER_NAMES.map((name) => (\r\n    <FilterBtn\r\n      key={name}\r\n      name={name}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"employeedirectoryapp stack-large\">\r\n      <h1>{filter}</h1>\r\n\r\n      <div className=\"filters btn-group stack-exception\">{filterList}</div>\r\n      <Employees employees={people} filter={FILTER_MAP[filter]}></Employees>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// let DATA = [\n// gets passed to employees = data on 15 below\n//   { id: \"person-0\", name: \"Bob\", jobTitle: \"Manager\", currentEmployee: true },\n//   { id: \"person-1\", name: \"Terry\", jobTitle: \"HR\", currentEmployee: false },\n//   { id: \"person-2\", name: \"Sarah\", jobTitle: \"CEO\", currentEmployee: false },\n// ];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}